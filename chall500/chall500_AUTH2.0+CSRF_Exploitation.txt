"The way to get the flag is to have the admin user "visit" a phishing link that you enter. 
You'll notice that after visiting the link, he uploads the flag to his profile.

After examining the OAuth2 social login flow, we notice that after you authenticate with the Identity Provider (IDP), 
it returns an authorization code to the browser. But you're not done yet - the browser hasn't finished "logging in" until 
it sends that authorization code to the server, who then exchanges it with the IDP for an access token.
Given this, we could make the admin user login as us by intercepting the login URL sent back from the social IDP 
(the URL contains the authorization code) and giving it to the admin user. When the admin visits the link, 
they'll inadvertently be initiating a request to exchange the authorization code for an access token, effectively 
logging them in as you. Then when they upload the flag to their profile, they'll actually be uploading it to your profile, 
which you can then fetch!" -Credit @Sid On Great Explanation

So the way we can exploit this is if we used burp suite, then we intercept the Get Request we make with the code from the server after
we authenticate ourselves @/callbackthen we grab the request, make the admin visit it, they will login to our account and upload the flag to our profile.
Then we login to our account on our own and view the profile for flag. 

A thing to note that is you send the getRequest to a yourself and then try and redu that authrization the Auth2 will not reconize your
code and the token will fail.

KEY IDEA: Auth2 First authenticates the User with their account, and then it authorizes the user will role permisions
