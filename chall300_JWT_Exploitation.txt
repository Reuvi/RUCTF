For this challenge we had to exploit the JWT authorization method, it had multiple parts to it.

The first part was realizing that the JWT authorizatipn can either be authorized through an asyncronous decrption method
but also a shared key encryption method, which many servers use to reduce the amount of time decrypting the jwt.

Their was an endpoint that spits out the public, shared key of the server so all I did was simply grab that using
a GET request and save it to a variable.

The next step was figuring our how the JWT token was formed, and after looking at the code and using google to help
I found that I need to use Shared Key HS256 Encryption Algorythm with the public key and the payload, which authorized a user
with their role permisions. I gave a user I had access to a higher role permision, encrypted with the public key, and then
send the JWT Token in a get request to the /admin page of the side. Then I send in an authorization header of bearer TOKEN 
and the server decrypted with that public key giving me authorized access.